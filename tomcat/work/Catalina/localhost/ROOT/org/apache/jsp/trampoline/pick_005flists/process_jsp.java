/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.15
 * Generated at: 2016-09-15 14:52:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.trampoline.pick_005flists;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.monumental.trampoline.component.*;
import com.reeltrack.users.*;
import com.reeltrack.picklists.*;
import com.reeltrack.reels.*;

public final class process_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1472002170000L));
    _jspx_dependants.put("jar:file:/www/new/tomcat/webapps/../../web/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098725490000L));
    _jspx_dependants.put("/WEB-INF/tags/admin/ajax_redirect.tag", Long.valueOf(1472002192000L));
    _jspx_dependants.put("/WEB-INF/tags/notifier/set_message.tag", Long.valueOf(1472002193000L));
    _jspx_dependants.put("/trampoline/pick_lists/../common/includes/only_users.jsp", Long.valueOf(1472002170000L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write("\t\t\n");
      out.write("\n");
      out.write("\n");
      com.reeltrack.users.RTUserLoginMgr onlyuserLoginMgr = null;
      onlyuserLoginMgr = (com.reeltrack.users.RTUserLoginMgr) _jspx_page_context.getAttribute("onlyuserLoginMgr", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (onlyuserLoginMgr == null){
        onlyuserLoginMgr = new com.reeltrack.users.RTUserLoginMgr();
        _jspx_page_context.setAttribute("onlyuserLoginMgr", onlyuserLoginMgr, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\n');
      out.write('\n');
 onlyuserLoginMgr.init(pageContext); 
      out.write('\n');
      out.write('\n');
 if(!onlyuserLoginMgr.isLoggedIn()) { 
      out.write("\n");
      out.write("\t<script type=\"text/javascript\" language=\"javascript\">\n");
      out.write("\t\t\t// first, if we're in the _submissionFrame, call window location on the parent\n");
      out.write("\t\t\tparent.window.location = \"");
      out.print( request.getContextPath() );
      out.write("/trampoline/index.jsp\";\n");
      out.write("\t\n");
      out.write("\t\t\t// otherwise, we'll be doing this on this window\n");
      out.write("\t\t\twindow.location = \"");
      out.print( request.getContextPath() );
      out.write("/trampoline/index.jsp\";\n");
      out.write("\t</script>\n");
 } 
      out.write('\n');
 if(!onlyuserLoginMgr.isLoggedIn()) return; 
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      com.monumental.trampoline.datasources.DbResources dbResources = null;
      dbResources = (com.monumental.trampoline.datasources.DbResources) _jspx_page_context.getAttribute("dbResources", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (dbResources == null){
        dbResources = new com.monumental.trampoline.datasources.DbResources();
        _jspx_page_context.setAttribute("dbResources", dbResources, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\n');
      com.reeltrack.users.RTUserMgr securityMgr = null;
      securityMgr = (com.reeltrack.users.RTUserMgr) _jspx_page_context.getAttribute("securityMgr", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (securityMgr == null){
        securityMgr = new com.reeltrack.users.RTUserMgr();
        _jspx_page_context.setAttribute("securityMgr", securityMgr, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\n');
      com.reeltrack.picklists.PickListMgr picklistMgr = null;
      picklistMgr = (com.reeltrack.picklists.PickListMgr) _jspx_page_context.getAttribute("picklistMgr", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (picklistMgr == null){
        picklistMgr = new com.reeltrack.picklists.PickListMgr();
        _jspx_page_context.setAttribute("picklistMgr", picklistMgr, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\n');
      com.reeltrack.reels.ReelMgr reelMgr = null;
      reelMgr = (com.reeltrack.reels.ReelMgr) _jspx_page_context.getAttribute("reelMgr", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (reelMgr == null){
        reelMgr = new com.reeltrack.reels.ReelMgr();
        _jspx_page_context.setAttribute("reelMgr", reelMgr, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\n');
 securityMgr.init(dbResources); 
      out.write('\n');
 picklistMgr.init(pageContext,dbResources); 
      out.write('\n');
 reelMgr.init(pageContext,dbResources); 
      out.write('\n');
 CompProperties props = new CompProperties(); 
      out.write('\n');
      out.write('\n');
 
String basePath = pageContext.getServletContext().getRealPath("/");
String notifier = "";
String redirect = request.getHeader("referer");
String action = "";
if(request.getParameter("submit_action") != null) {
    action = request.getParameter("submit_action");
}

int contid = 0;
if(request.getParameter(PickList.PARAM) != null) {
    contid = Integer.parseInt(request.getParameter(PickList.PARAM));
}


if(action.equals("create")) {
    PickList content = new PickList();
    content.setName(request.getParameter(PickList.NAME_COLUMN));
    contid = picklistMgr.addPickList(content);

    redirect = request.getContextPath() + "/trampoline/" + "pick_lists/search.jsp";
}


if(action.equals("update")) {
    PickList content = new PickList();
    content.setId(contid);
    content.setName(request.getParameter(PickList.NAME_COLUMN));
    content.setForeman(request.getParameter(PickList.FOREMAN_COLUMN));
    picklistMgr.updatePickList(content);
    redirect = request.getContextPath() + "/trampoline/" + "pick_lists/edit.jsp?" + PickList.PARAM + "=" + contid ;
}

if(action.equals("print")) {
    PickList content = new PickList();
    content.setId(contid);
    picklistMgr.generateQrCodesforPickList(content);
    redirect = request.getContextPath() + "/trampoline/" + "pick_lists/search.jsp";
}

if(action.equals("add_reel")) {
    Reel content = new Reel();
    content.setId(Integer.parseInt(request.getParameter(Reel.PARAM)));
    content.setPickListId(contid);
    picklistMgr.updateReelForPickList(content);
    redirect = request.getContextPath() + "/trampoline/" + "pick_lists/edit.jsp?" + PickList.PARAM + "=" + contid ;
}

if(action.equals("delete_reel")) {
    Reel content = new Reel();
    content.setId(Integer.parseInt(request.getParameter(Reel.PARAM)));
	Reel toRemove = reelMgr.getReel(content);
    content.setPickListId(0);
    picklistMgr.updateReelForPickList(content, toRemove);
    redirect = request.getContextPath() + "/trampoline/" + "pick_lists/edit.jsp?" + PickList.PARAM + "=" + contid ;
}

if(action.equals("update_reel_position")) {
	Reel reel = new Reel();
	reel.setId(Integer.parseInt(request.getParameter(Reel.PARAM)));
	reel.setForeignKeyId(Integer.parseInt(request.getParameter(PickList.PARAM)));
	reel.setPosition(Integer.parseInt(request.getParameter(Reel.POSITION_COLUMN )));

	picklistMgr.setPosition(reel);

	redirect = request.getContextPath() + "/trampoline/" + "pick_lists/edit.jsp?" + PickList.PARAM + "=" + contid ;
}

/*
if(action.equals("update_shipping")) {
    Reel content = new Reel();
    content.setId(contid);
    content.setCarrier(request.getParameter(Reel.CARRIER_COLUMN));
    content.setTrackingPRO(request.getParameter(Reel.TRACKING_PRO_COLUMN));
    content.setPackingList(request.getParameter(Reel.PACKING_LIST_COLUMN));
    if(request.getParameter(Reel.PROJECTED_SHIPPING_DATE_COLUMN)!=null && !request.getParameter(Reel.PROJECTED_SHIPPING_DATE_COLUMN).equals("")) {
        content.setProjectedShippingDateString(request.getParameter(Reel.PROJECTED_SHIPPING_DATE_COLUMN));
    }
    reelMgr.updateReelShippingInfo(content);
    redirect = request.getContextPath() + "/trampoline/" + "reels/edit.jsp?" + Reel.PARAM + "=" + contid ;
}

if(action.equals("update_receiving")) {
    Reel content = new Reel();
    content.setId(contid);
    content.setReceivingIssue(request.getParameter(Reel.RECEIVING_ISSUE_COLUMN));
    content.setReceivingNote(request.getParameter(Reel.RECEIVING_NOTE_COLUMN));
    content.setReceivingDisposition(request.getParameter(Reel.RECEIVING_DISPOSITION_COLUMN));
    reelMgr.updateReelReceivingInfo(content);
    redirect = request.getContextPath() + "/trampoline/" + "reels/edit.jsp?" + Reel.PARAM + "=" + contid ;
}

if(action.equals("update_quantity")) {
    Reel content = new Reel();
    content.setId(contid);
    content.setShippedQuantity(Integer.parseInt(request.getParameter(Reel.SHIPPED_QUANTITY_COLUMN)));
    content.setReceivedQuantity(Integer.parseInt(request.getParameter(Reel.RECEIVED_QUANTITY_COLUMN)));
    content.setTopFoot(Integer.parseInt(request.getParameter(Reel.TOP_FOOT_COLUMN)));
    reelMgr.updateReelQuantity(content);
    redirect = request.getContextPath() + "/trampoline/" + "reels/quantity.jsp?" + Reel.PARAM + "=" + contid ;
}

if(action.equals("record_pull")) {
    Reel content = new Reel();
    content.setId(contid);
    content.setTempPullAmount(Integer.parseInt(request.getParameter("pulled_quantity")));
    content.setTopFoot(Integer.parseInt(request.getParameter(Reel.TOP_FOOT_COLUMN)));
    reelMgr.updateReelPull(content);
    redirect = request.getContextPath() + "/trampoline/" + "reels/quantity.jsp?" + Reel.PARAM + "=" + contid ;
}

if(action.equals("add_circuit")) {
    ReelCircuit content = new ReelCircuit();
    content.setReelId(contid);
    content.setLength(Integer.parseInt(request.getParameter(ReelCircuit.LENGTH_COLUMN)));
    content.setName(request.getParameter(ReelCircuit.NAME_COLUMN));
    reelMgr.addReelCircuit(content);
    redirect = request.getContextPath() + "/trampoline/" + "reels/circuits.jsp?" + Reel.PARAM + "=" + contid ;
}

if(action.equals("update_circuit")) {
    ReelCircuit content = new ReelCircuit();
    content.setId(Integer.parseInt(request.getParameter(ReelCircuit.PARAM)));
    if(request.getParameter(ReelCircuit.IS_PULLED_COLUMN)!=null) {
        content.setIsPulled("y");
    } else {
        content.setIsPulled("n");
    }
    reelMgr.updateReelCircuit(content);
    redirect = request.getContextPath() + "/trampoline/" + "reels/circuits.jsp?" + Reel.PARAM + "=" + contid ;
}

if(action.equals("delete_circuit")) {
    ReelCircuit content = new ReelCircuit();
    content.setId(Integer.parseInt(request.getParameter(ReelCircuit.PARAM)));
    reelMgr.deleteReelCircuit(content,basePath);
    redirect = request.getContextPath() + "/trampoline/" + "reels/circuits.jsp?" + Reel.PARAM + "=" + contid ;
}

if(action.equals("add_note")) {
    ReelNote note = new ReelNote();
    note.setReelId(contid);
    note.setNote(request.getParameter(ReelNote.NOTE_COLUMN));
    reelMgr.addReelNote(note);
    redirect = request.getContextPath() + "/trampoline/" + "reels/notes.jsp?" + Reel.PARAM + "=" + contid ;
}

if(action.equals("add_issue")) {
    ReelIssue issue = new ReelIssue();
    issue.setReelId(contid);
    issue.setDescription(request.getParameter(ReelIssue.DESCRIPTION_COLUMN));
    issue.setIssueLog(request.getParameter(ReelIssue.ISSUE_LOG_COLUMN));
    reelMgr.addReelIssue(issue);
    redirect = request.getContextPath() + "/trampoline/" + "reels/issues.jsp?" + Reel.PARAM + "=" + contid ;
}

if(action.equals("update_issue")) {
    ReelIssue issue = new ReelIssue();
    issue.setId(Integer.parseInt(request.getParameter(ReelIssue.PARAM)));
    if(request.getParameter(ReelIssue.IS_RESOLVED_COLUMN)!=null) {
        issue.setIsResolved("y");
    } else {
        issue.setIsResolved("n");
    }
    issue.setIssueLog(request.getParameter(ReelIssue.ISSUE_LOG_COLUMN));
    reelMgr.updateReelIssue(issue);
    redirect = request.getContextPath() + "/trampoline/" + "reels/issues.jsp?" + Reel.PARAM + "=" + contid ;
}
*/

      out.write('\n');
 dbResources.close(); 
      out.write('\n');
      //  notifier:set_message
      org.apache.jsp.tag.webnotifier.set_005fmessage_tag _jspx_th_notifier_005fset_005fmessage_005f0 = (new org.apache.jsp.tag.webnotifier.set_005fmessage_tag());
      _jsp_instancemanager.newInstance(_jspx_th_notifier_005fset_005fmessage_005f0);
      _jspx_th_notifier_005fset_005fmessage_005f0.setJspContext(_jspx_page_context);
      // /trampoline/pick_lists/process.jsp(192,0) name = text type = java.lang.String reqTime = true required = true fragment = false deferredValue = false expectedTypeName = java.lang.String deferredMethod = false methodSignature = null
      _jspx_th_notifier_005fset_005fmessage_005f0.setText( notifier );
      _jspx_th_notifier_005fset_005fmessage_005f0.doTag();
      _jsp_instancemanager.destroyInstance(_jspx_th_notifier_005fset_005fmessage_005f0);
      out.write('	');
      out.write('	');
      out.write('\n');
      //  admin:ajax_redirect
      org.apache.jsp.tag.webadmin.ajax_005fredirect_tag _jspx_th_admin_005fajax_005fredirect_005f0 = (new org.apache.jsp.tag.webadmin.ajax_005fredirect_tag());
      _jsp_instancemanager.newInstance(_jspx_th_admin_005fajax_005fredirect_005f0);
      _jspx_th_admin_005fajax_005fredirect_005f0.setJspContext(_jspx_page_context);
      // /trampoline/pick_lists/process.jsp(193,0) name = redirect type = java.lang.String reqTime = true required = true fragment = false deferredValue = false expectedTypeName = java.lang.String deferredMethod = false methodSignature = null
      _jspx_th_admin_005fajax_005fredirect_005f0.setRedirect( redirect );
      _jspx_th_admin_005fajax_005fredirect_005f0.doTag();
      _jsp_instancemanager.destroyInstance(_jspx_th_admin_005fajax_005fredirect_005f0);
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
